// components/pages/chats/Chats.tsx
import React, { useState } from 'react';
import { KeyboardAvoidingView, Platform, ScrollView } from 'react-native';
import { VStack, Heading, Text, Icon, HStack } from '@gluestack-ui/themed';
import { MessageCircle, Phone, Save, Search, Loader2, User } from 'lucide-react-native';
import BaseButton from '../../common/BaseButton';
import BaseInput from '../../common/BaseInput';
import BaseAvatar from '../../common/BaseAvatar';
import BaseTypography from '../../common/BaseTypography';
import BaseCallButton from '../../common/BaseCallButton';
import BaseContactCard from '../../common/BaseContactCard';

export default function Chats() {
    const [email, setEmail] = useState('');
    const [pwd, setPwd] = useState('');
    const [query, setQuery] = useState('');
    const [muted, setMuted] = useState(false);
    const [videoOff, setVideoOff] = useState(false);
    const [speakerOn, setSpeakerOn] = useState(false);

    return (
        <KeyboardAvoidingView
            style={{ flex: 1 }}
            behavior={Platform.select({ ios: 'padding', android: undefined })}
            keyboardVerticalOffset={Platform.select({ ios: 64, android: 0 })}
        >
            <ScrollView
                contentContainerStyle={{ flexGrow: 1, padding: 24 }}
                keyboardShouldPersistTaps="handled"
                showsVerticalScrollIndicator
            >
                <VStack space="2xl" alignItems="center" width="100%">
                    <Icon as={MessageCircle} size="xl" color="$textLight500" />
                    <Heading size="md">–ß–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</Heading>
                    <Text size="sm" color="$textLight500" textAlign="center">
                        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É–¥—É—â–µ–º.
                        –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–≤–æ–Ω–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.
                    </Text>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã BaseTypography */}
                    <VStack space="lg" width="100%" mt="$8">
                        <Heading size="sm">Typography</Heading>
                        <BaseTypography variant="h1">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1</BaseTypography>
                        <BaseTypography variant="h2">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2</BaseTypography>
                        <BaseTypography variant="h3">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H3</BaseTypography>
                        <BaseTypography variant="h4">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H4</BaseTypography>
                        <BaseTypography variant="h5">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H5</BaseTypography>
                        <BaseTypography variant="h6">–ó–∞–≥–æ–ª–æ–≤–æ–∫ H6</BaseTypography>
                        <BaseTypography>
                            –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (body). –¢—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏–ª–∏ –∞–±–∑–∞—Ü.
                        </BaseTypography>
                        <BaseTypography variant="link" href="https://voxport.app">
                            –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç Voxport
                        </BaseTypography>
                    </VStack>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã Avatar */}
                    <VStack space="lg" width="100%" mt="$8">
                        <Heading size="sm">Avatar</Heading>
                        <HStack space="md" alignItems="center">
                            <BaseAvatar src="https://i.pravatar.cc/100?img=15" size="md" />
                            <BaseAvatar fallback="BH" size="md" />
                            <BaseAvatar size="md" iconFallback={<Icon as={User} size="sm" />} />
                        </HStack>
                        <HStack space="md" alignItems="center">
                            <BaseAvatar fallback="XS" size="xs" />
                            <BaseAvatar fallback="SM" size="sm" />
                            <BaseAvatar fallback="MD" size="md" />
                            <BaseAvatar fallback="LG" size="lg" />
                            <BaseAvatar fallback="XL" size="xl" />
                        </HStack>
                        <HStack space="md" alignItems="center">
                            <BaseAvatar
                                src="https://i.pravatar.cc/100?img=32"
                                size="lg"
                                onPress={() => console.log('Open profile')}
                            />
                            <Text size="xs" color="$textLight500">
                                –ù–∞–∂–º–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å (–ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å)
                            </Text>
                        </HStack>
                    </VStack>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã BaseInput */}
                    <VStack space="lg" width="100%" mt="$8">
                        <BaseInput
                            label="Email"
                            placeholder="you@voxport.app"
                            value={email}
                            onChangeText={setEmail}
                            leftIcon={<Icon as={Search} size="sm" />}
                            helperText="–ú—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏–º—Å—è –≤–∞—à–µ–π –ø–æ—á—Ç–æ–π."
                            autoCapitalize="none"
                            keyboardType="email-address"
                            clearable
                        />
                        <BaseInput
                            label="–ü–∞—Ä–æ–ª—å"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            value={pwd}
                            onChangeText={setPwd}
                            secureTextEntry
                            passwordToggle
                            helperText="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤."
                        />
                        <BaseInput
                            label="–ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"
                            value={query}
                            onChangeText={setQuery}
                            rightIcon={<Icon as={Search} size="sm" />}
                            clearable
                        />
                        <BaseInput label="–ò–Ω–ø—É—Ç –≤ –∑–∞–≥—Ä—É–∑–∫–µ" placeholder="–ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã..." loading />
                        <BaseInput
                            label="–ò–Ω–ø—É—Ç —Å –æ—à–∏–±–∫–æ–π"
                            placeholder="–¢—É—Ç –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞"
                            isInvalid
                            errorText="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
                        />
                    </VStack>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã BaseButton */}
                    <VStack space="lg" width="100%" mt="$8">
                        <BaseButton label="–ü—Ä–æ—Å—Ç–æ–π primary" onPress={() => {}} />
                        <BaseButton
                            label="Outline Success"
                            variant="outline"
                            intent="success"
                            leftIcon={<Icon as={Save} size="sm" />}
                            onPress={() => {}}
                        />
                        <BaseButton
                            label="Full Width Call"
                            intent="primary"
                            fullWidth
                            leftIcon={<Icon as={Phone} size="sm" />}
                            onPress={() => {}}
                        />
                        <BaseButton
                            label="–ó–∞–≥—Ä—É–∑–∫–∞..."
                            loading
                            fullWidth
                            onPress={() => {}}
                            rightIcon={<Icon as={Loader2} size="sm" />}
                        />
                        <HStack space="md" width="100%" justifyContent="center">
                            <BaseButton label="XS" size="xs" intent="secondary" onPress={() => {}} />
                            <BaseButton label="SM" size="sm" intent="warning" onPress={() => {}} />
                            <BaseButton label="LG" size="lg" intent="error" onPress={() => {}} />
                        </HStack>
                    </VStack>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã BaseCallButton */}
                    <VStack space="lg" width="100%" mt="$8">
                        <Heading size="sm">Call Controls</Heading>

                        {/* Answer / End */}
                        <HStack space="2xl" justifyContent="center">
                            <VStack space="xs" alignItems="center">
                                <BaseCallButton type="answer" onPress={() => console.log('Answer call')} />
                                <Text size="xs" color="$textLight500">Answer</Text>
                            </VStack>
                            <VStack space="xs" alignItems="center">
                                <BaseCallButton type="end" onPress={() => console.log('End call')} />
                                <Text size="xs" color="$textLight500">End</Text>
                            </VStack>
                        </HStack>

                        {/* Toggles */}
                        <HStack space="2xl" justifyContent="center">
                            <VStack space="xs" alignItems="center">
                                <BaseCallButton
                                    type="mute"
                                    active={muted}
                                    onPress={() => setMuted((s) => !s)}
                                />
                                <Text size="xs" color="$textLight500">{muted ? 'Unmute' : 'Mute'}</Text>
                            </VStack>
                            <VStack space="xs" alignItems="center">
                                <BaseCallButton
                                    type="video"
                                    active={videoOff}
                                    onPress={() => setVideoOff((s) => !s)}
                                />
                                <Text size="xs" color="$textLight500">{videoOff ? 'Video off' : 'Video on'}</Text>
                            </VStack>
                            <VStack space="xs" alignItems="center">
                                <BaseCallButton
                                    type="speaker"
                                    active={speakerOn}
                                    onPress={() => setSpeakerOn((s) => !s)}
                                />
                                <Text size="xs" color="$textLight500">{speakerOn ? 'Speaker on' : 'Speaker off'}</Text>
                            </VStack>
                        </HStack>
                    </VStack>

                    {/* üîπ –ü—Ä–∏–º–µ—Ä—ã BaseContactCard */}
                    <VStack space="md" width="100%" mt="$8">
                        <Heading size="sm">Contact Card</Heading>
                        <BaseContactCard
                            name="Alice Johnson"
                            status="online"
                            avatarSrc="https://i.pravatar.cc/100?img=11"
                            onCallPress={() => console.log('Call Alice')}
                        />
                        <BaseContactCard
                            name="Bogdan Hlyan"
                            status="last seen 5m ago"
                            avatarSrc="https://i.pravatar.cc/100?img=3"
                            onCallPress={() => console.log('Call Bogdan')}
                        />
                        <BaseContactCard
                            name="Anton Petrov"
                            status="offline"
                            avatarFallback="AP"
                            onCallPress={() => console.log('Call Anton')}
                        />
                    </VStack>
                </VStack>
            </ScrollView>
        </KeyboardAvoidingView>
    );
}
