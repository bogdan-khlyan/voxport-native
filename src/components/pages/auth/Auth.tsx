// components/pages/auth/Auth.tsx
import React, { useMemo, useState } from 'react';
import { KeyboardAvoidingView, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
    Box, VStack, Heading, Text,
    Input, InputField, Button, ButtonText,
    FormControl, FormControlLabel, FormControlLabelText,
    FormControlError, FormControlErrorText,
    HStack, Badge, BadgeText
} from '@gluestack-ui/themed';

const EMAIL_RE = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

export type Profile = {
    name: string;
    email: string;
    createdAt: string;
};

export const STORAGE_KEYS = {
    PROFILE: 'app.profile',
};

type Props = {
    onDone?: () => void; // –≤—ã–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
};

const Auth: React.FC<Props> = ({ onDone }) => {
    const [name, setName]   = useState('');
    const [email, setEmail] = useState('');
    const [busy, setBusy]   = useState(false);

    const nameErr  = useMemo(() => (name.trim().length < 2 ? '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' : ''), [name]);
    const emailErr = useMemo(() => (!EMAIL_RE.test(email.trim()) ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' : ''), [email]);
    const valid    = !nameErr && !emailErr && !!name && !!email;

    const handleSubmit = async () => {
        if (!valid || busy) return;
        try {
            setBusy(true);
            const profile: Profile = {
                name: name.trim(),
                email: email.trim().toLowerCase(),
                createdAt: new Date().toISOString(),
            };
            await AsyncStorage.setItem(STORAGE_KEYS.PROFILE, JSON.stringify(profile));
            onDone?.();
        } finally {
            setBusy(false);
        }
    };

    return (
        <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
            <Box flex={1} p="$4" justifyContent="center">
                <VStack space="xl">
                    <VStack space="xs">
                        <Heading size="xl">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã</Heading>
                        <Text size="sm" color="$textLight600">
                            –í–≤–µ–¥–∏ –∏–º—è –∏ email ‚Äî –∏ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
                        </Text>
                        <HStack space="sm" mt="$2">
                            <Badge variant="outline" rounded="$full"><BadgeText size="2xs">–û—Ñ—Ñ–ª–∞–π–Ω</BadgeText></Badge>
                            <Badge variant="outline" rounded="$full"><BadgeText size="2xs">–ë–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞</BadgeText></Badge>
                            <Badge variant="outline" rounded="$full"><BadgeText size="2xs">–õ–æ–∫–∞–ª—å–Ω–æ</BadgeText></Badge>
                        </HStack>
                    </VStack>

                    <VStack space="md">
                        <FormControl isInvalid={!!nameErr}>
                            <FormControlLabel><FormControlLabelText>–ò–º—è</FormControlLabelText></FormControlLabel>
                            <Input>
                                <InputField
                                    value={name}
                                    onChangeText={setName}
                                    placeholder="–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è"
                                    autoCapitalize="words"
                                    returnKeyType="next"
                                />
                            </Input>
                            {nameErr ? (
                                <FormControlError><FormControlErrorText>{nameErr}</FormControlErrorText></FormControlError>
                            ) : null}
                        </FormControl>

                        <FormControl isInvalid={!!emailErr}>
                            <FormControlLabel><FormControlLabelText>Email</FormControlLabelText></FormControlLabel>
                            <Input>
                                <InputField
                                    value={email}
                                    onChangeText={setEmail}
                                    placeholder="you@example.com"
                                    autoCapitalize="none"
                                    keyboardType="email-address"
                                    returnKeyType="done"
                                />
                            </Input>
                            {emailErr ? (
                                <FormControlError><FormControlErrorText>{emailErr}</FormControlErrorText></FormControlError>
                            ) : null}
                        </FormControl>
                    </VStack>

                    <Button
                        size="md"
                        rounded="$2xl"
                        isDisabled={!valid || busy}
                        onPress={handleSubmit}
                    >
                        <ButtonText>{busy ? '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}</ButtonText>
                    </Button>

                    <Text size="xs" color="$textLight500">
                        –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
                        –ò–∑–º–µ–Ω–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö¬ª.
                    </Text>
                </VStack>
            </Box>
        </KeyboardAvoidingView>
    );
};

export default Auth;
